<?php

namespace haotong\cdn;

use Exception;
use OSS\OssClient;

/**
 * oss cdn
 *
 * Class Alioss
 * @package haotong\cdn
 */
class Alioss extends CdnAbstract implements CdnInterface
{
    public $accessKey;

    public $accessSecret;

    public $endPoint;

    public $bucket;

    /**
     * @var object OssClient
     */
    public $client;

    /**
     * @throws Exception
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if( empty($this->accessKey) ) throw new Exception("Alioss accessKey cannot be blank");
        if( empty($this->accessSecret) ) throw new Exception("Alioss accessSecret cannot be blank");
        if( empty($this->endPoint) ) throw new Exception("Alioss endPoint cannot be blank");
        $this->client = new OssClient($this->accessKey, $this->accessSecret, $this->endPoint);
    }

    /**
     * @param string $localFile
     * @param string $destFile
     * @return bool
     */
    public function upload($localFile, $destFile)
    {
        $destFile = $this->nomarlizeDestFilePath($destFile);
        try {
            $result = $this->client->uploadFile($this->bucket, $destFile, $localFile);
            return true;
        }catch (Exception $e){
            $this->lastError = $e->getMessage();
            return false;
        }
    }

    /**
     * @param string $localFile
     * @param string $destFile
     * @return bool
     */
    public function multiUpload($localFile, $destFile)
    {
        $destFile = $this->nomarlizeDestFilePath($destFile);
        try {
            $this->client->multiuploadFile($this->bucket, $destFile, $localFile);
            return true;
        }catch (Exception $e){
            $this->lastError = $e->getMessage();
            return false;
        }
    }

    /**
     * @param string $destFile
     * @return bool
     */
    public function exists($destFile)
    {
        if( empty($destFile) ) return false;
        $destFile = $this->nomarlizeDestFilePath($destFile);
        return $this->client->doesObjectExist($this->bucket, $destFile);
    }

    /**
     * @param string $destFile
     * @return bool
     */
    public function delete($destFile)
    {
        $destFile = $this->nomarlizeDestFilePath($destFile);
        try {
            $result = $this->client->deleteObject($this->bucket, $destFile);
            return true;
        }catch (Exception $e){
            $this->lastError = $e->getMessage();
            return false;
        }
    }

    /**
     * @param $destFile
     * @return bool|string
     */
    private function nomarlizeDestFilePath($destFile)
    {
        if( strpos($destFile, '/') === 0 ) $destFile = substr($destFile, 1);
        return $destFile;
    }
}